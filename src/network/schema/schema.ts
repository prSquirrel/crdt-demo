/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = "8a288399e900f2b9";
export enum Message_Which {
    UNKNOWN = 0,
    OPERATION = 1,
    SYNC = 2
}
export class Message extends __S {
    static readonly UNKNOWN = Message_Which.UNKNOWN;
    static readonly OPERATION = Message_Which.OPERATION;
    static readonly SYNC = Message_Which.SYNC;
    static readonly _capnp = { displayName: "Message", id: "8c67f1447c9cab61", size: new __O(8, 1) };
    isUnknown(): boolean { return __S.getUint16(0, this) === 0; }
    setUnknown(): void { __S.setUint16(0, 0, this); }
    adoptOperation(value: capnp.Orphan<OperationMessage>): void {
        __S.setUint16(0, 1, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownOperation(): capnp.Orphan<OperationMessage> { return __S.disown(this.getOperation()); }
    getOperation(): OperationMessage {
        __S.testWhich("operation", __S.getUint16(0, this), 1, this);
        return __S.getStruct(0, OperationMessage, this);
    }
    hasOperation(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initOperation(): OperationMessage {
        __S.setUint16(0, 1, this);
        return __S.initStructAt(0, OperationMessage, this);
    }
    isOperation(): boolean { return __S.getUint16(0, this) === 1; }
    setOperation(value: OperationMessage): void {
        __S.setUint16(0, 1, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    adoptSync(value: capnp.Orphan<SyncMessage>): void {
        __S.setUint16(0, 2, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownSync(): capnp.Orphan<SyncMessage> { return __S.disown(this.getSync()); }
    getSync(): SyncMessage {
        __S.testWhich("sync", __S.getUint16(0, this), 2, this);
        return __S.getStruct(0, SyncMessage, this);
    }
    hasSync(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initSync(): SyncMessage {
        __S.setUint16(0, 2, this);
        return __S.initStructAt(0, SyncMessage, this);
    }
    isSync(): boolean { return __S.getUint16(0, this) === 2; }
    setSync(value: SyncMessage): void {
        __S.setUint16(0, 2, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    toString(): string { return "Message_" + super.toString(); }
    which(): Message_Which { return __S.getUint16(0, this); }
}
export class OperationMessage_VectorClock_ClockMap_Entry extends __S {
    static readonly _capnp = { displayName: "Entry", id: "83e7551f3728e4fd", size: new __O(8, 1) };
    getSite(): string { return __S.getText(0, this); }
    setSite(value: string): void { __S.setText(0, value, this); }
    getClock(): number { return __S.getUint32(0, this); }
    setClock(value: number): void { __S.setUint32(0, value, this); }
    toString(): string { return "OperationMessage_VectorClock_ClockMap_Entry_" + super.toString(); }
}
export class OperationMessage_VectorClock_ClockMap extends __S {
    static readonly Entry = OperationMessage_VectorClock_ClockMap_Entry;
    static readonly _capnp = { displayName: "ClockMap", id: "bf9e3636f0e0afdd", size: new __O(0, 1) };
    static _Entries: capnp.ListCtor<OperationMessage_VectorClock_ClockMap_Entry>;
    adoptEntries(value: capnp.Orphan<capnp.List<OperationMessage_VectorClock_ClockMap_Entry>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownEntries(): capnp.Orphan<capnp.List<OperationMessage_VectorClock_ClockMap_Entry>> { return __S.disown(this.getEntries()); }
    getEntries(): capnp.List<OperationMessage_VectorClock_ClockMap_Entry> { return __S.getList(0, OperationMessage_VectorClock_ClockMap._Entries, this); }
    hasEntries(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initEntries(length: number): capnp.List<OperationMessage_VectorClock_ClockMap_Entry> { return __S.initList(0, OperationMessage_VectorClock_ClockMap._Entries, length, this); }
    setEntries(value: capnp.List<OperationMessage_VectorClock_ClockMap_Entry>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "OperationMessage_VectorClock_ClockMap_" + super.toString(); }
}
export class OperationMessage_VectorClock extends __S {
    static readonly ClockMap = OperationMessage_VectorClock_ClockMap;
    static readonly _capnp = { displayName: "VectorClock", id: "d5be410b2d64d619", size: new __O(0, 2) };
    getSite(): string { return __S.getText(0, this); }
    setSite(value: string): void { __S.setText(0, value, this); }
    adoptSiteClock(value: capnp.Orphan<OperationMessage_VectorClock_ClockMap>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownSiteClock(): capnp.Orphan<OperationMessage_VectorClock_ClockMap> { return __S.disown(this.getSiteClock()); }
    getSiteClock(): OperationMessage_VectorClock_ClockMap { return __S.getStruct(1, OperationMessage_VectorClock_ClockMap, this); }
    hasSiteClock(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initSiteClock(): OperationMessage_VectorClock_ClockMap { return __S.initStructAt(1, OperationMessage_VectorClock_ClockMap, this); }
    setSiteClock(value: OperationMessage_VectorClock_ClockMap): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "OperationMessage_VectorClock_" + super.toString(); }
}
export class OperationMessage extends __S {
    static readonly VectorClock = OperationMessage_VectorClock;
    static readonly _capnp = { displayName: "OperationMessage", id: "d5f9a8895d3bf115", size: new __O(0, 2) };
    adoptVclock(value: capnp.Orphan<OperationMessage_VectorClock>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownVclock(): capnp.Orphan<OperationMessage_VectorClock> { return __S.disown(this.getVclock()); }
    getVclock(): OperationMessage_VectorClock { return __S.getStruct(0, OperationMessage_VectorClock, this); }
    hasVclock(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initVclock(): OperationMessage_VectorClock { return __S.initStructAt(0, OperationMessage_VectorClock, this); }
    setVclock(value: OperationMessage_VectorClock): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptOperation(value: capnp.Orphan<Operation>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownOperation(): capnp.Orphan<Operation> { return __S.disown(this.getOperation()); }
    getOperation(): Operation { return __S.getStruct(1, Operation, this); }
    hasOperation(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initOperation(): Operation { return __S.initStructAt(1, Operation, this); }
    setOperation(value: Operation): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "OperationMessage_" + super.toString(); }
}
export class SyncMessage extends __S {
    static readonly _capnp = { displayName: "SyncMessage", id: "c37b45db023837ce", size: new __O(8, 1) };
    static _Operations: capnp.ListCtor<Operation>;
    adoptOperations(value: capnp.Orphan<capnp.List<Operation>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownOperations(): capnp.Orphan<capnp.List<Operation>> { return __S.disown(this.getOperations()); }
    getOperations(): capnp.List<Operation> { return __S.getList(0, SyncMessage._Operations, this); }
    hasOperations(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initOperations(length: number): capnp.List<Operation> { return __S.initList(0, SyncMessage._Operations, length, this); }
    setOperations(value: capnp.List<Operation>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    getBatchNumber(): number { return __S.getUint32(0, this); }
    setBatchNumber(value: number): void { __S.setUint32(0, value, this); }
    getTotalBatches(): number { return __S.getUint32(4, this); }
    setTotalBatches(value: number): void { __S.setUint32(4, value, this); }
    toString(): string { return "SyncMessage_" + super.toString(); }
}
export class Operation_Insert extends __S {
    static readonly _capnp = { displayName: "Insert", id: "8625428e622fedf4", size: new __O(0, 4) };
    static _HappenedBefore: capnp.ListCtor<Operation_Timestamp>;
    getValue(): string { return __S.getText(0, this); }
    setValue(value: string): void { __S.setText(0, value, this); }
    adoptTimestamp(value: capnp.Orphan<Operation_Timestamp>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownTimestamp(): capnp.Orphan<Operation_Timestamp> { return __S.disown(this.getTimestamp()); }
    getTimestamp(): Operation_Timestamp { return __S.getStruct(1, Operation_Timestamp, this); }
    hasTimestamp(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initTimestamp(): Operation_Timestamp { return __S.initStructAt(1, Operation_Timestamp, this); }
    setTimestamp(value: Operation_Timestamp): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptHappenedBefore(value: capnp.Orphan<capnp.List<Operation_Timestamp>>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownHappenedBefore(): capnp.Orphan<capnp.List<Operation_Timestamp>> { return __S.disown(this.getHappenedBefore()); }
    getHappenedBefore(): capnp.List<Operation_Timestamp> { return __S.getList(2, Operation_Insert._HappenedBefore, this); }
    hasHappenedBefore(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initHappenedBefore(length: number): capnp.List<Operation_Timestamp> { return __S.initList(2, Operation_Insert._HappenedBefore, length, this); }
    setHappenedBefore(value: capnp.List<Operation_Timestamp>): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptReferenceTimestamp(value: capnp.Orphan<Operation_Timestamp>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownReferenceTimestamp(): capnp.Orphan<Operation_Timestamp> { return __S.disown(this.getReferenceTimestamp()); }
    getReferenceTimestamp(): Operation_Timestamp { return __S.getStruct(3, Operation_Timestamp, this); }
    hasReferenceTimestamp(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initReferenceTimestamp(): Operation_Timestamp { return __S.initStructAt(3, Operation_Timestamp, this); }
    setReferenceTimestamp(value: Operation_Timestamp): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    toString(): string { return "Operation_Insert_" + super.toString(); }
}
export class Operation_Remove extends __S {
    static readonly _capnp = { displayName: "Remove", id: "c21a58979e2eb8aa", size: new __O(0, 1) };
    adoptTimestamp(value: capnp.Orphan<Operation_Timestamp>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownTimestamp(): capnp.Orphan<Operation_Timestamp> { return __S.disown(this.getTimestamp()); }
    getTimestamp(): Operation_Timestamp { return __S.getStruct(0, Operation_Timestamp, this); }
    hasTimestamp(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initTimestamp(): Operation_Timestamp { return __S.initStructAt(0, Operation_Timestamp, this); }
    setTimestamp(value: Operation_Timestamp): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "Operation_Remove_" + super.toString(); }
}
export class Operation_Timestamp extends __S {
    static readonly _capnp = { displayName: "Timestamp", id: "dce459e12f4c7d66", size: new __O(8, 1) };
    getSite(): string { return __S.getText(0, this); }
    setSite(value: string): void { __S.setText(0, value, this); }
    getClock(): number { return __S.getUint32(0, this); }
    setClock(value: number): void { __S.setUint32(0, value, this); }
    toString(): string { return "Operation_Timestamp_" + super.toString(); }
}
export enum Operation_Which {
    UNKNOWN = 0,
    INSERT = 1,
    REMOVE = 2
}
export class Operation extends __S {
    static readonly UNKNOWN = Operation_Which.UNKNOWN;
    static readonly INSERT = Operation_Which.INSERT;
    static readonly REMOVE = Operation_Which.REMOVE;
    static readonly Insert = Operation_Insert;
    static readonly Remove = Operation_Remove;
    static readonly Timestamp = Operation_Timestamp;
    static readonly _capnp = { displayName: "Operation", id: "a8f9d4753339ca01", size: new __O(8, 1) };
    isUnknown(): boolean { return __S.getUint16(0, this) === 0; }
    setUnknown(): void { __S.setUint16(0, 0, this); }
    adoptInsert(value: capnp.Orphan<Operation_Insert>): void {
        __S.setUint16(0, 1, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownInsert(): capnp.Orphan<Operation_Insert> { return __S.disown(this.getInsert()); }
    getInsert(): Operation_Insert {
        __S.testWhich("insert", __S.getUint16(0, this), 1, this);
        return __S.getStruct(0, Operation_Insert, this);
    }
    hasInsert(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initInsert(): Operation_Insert {
        __S.setUint16(0, 1, this);
        return __S.initStructAt(0, Operation_Insert, this);
    }
    isInsert(): boolean { return __S.getUint16(0, this) === 1; }
    setInsert(value: Operation_Insert): void {
        __S.setUint16(0, 1, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    adoptRemove(value: capnp.Orphan<Operation_Remove>): void {
        __S.setUint16(0, 2, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownRemove(): capnp.Orphan<Operation_Remove> { return __S.disown(this.getRemove()); }
    getRemove(): Operation_Remove {
        __S.testWhich("remove", __S.getUint16(0, this), 2, this);
        return __S.getStruct(0, Operation_Remove, this);
    }
    hasRemove(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initRemove(): Operation_Remove {
        __S.setUint16(0, 2, this);
        return __S.initStructAt(0, Operation_Remove, this);
    }
    isRemove(): boolean { return __S.getUint16(0, this) === 2; }
    setRemove(value: Operation_Remove): void {
        __S.setUint16(0, 2, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    toString(): string { return "Operation_" + super.toString(); }
    which(): Operation_Which { return __S.getUint16(0, this); }
}
OperationMessage_VectorClock_ClockMap._Entries = capnp.CompositeList(OperationMessage_VectorClock_ClockMap_Entry);
SyncMessage._Operations = capnp.CompositeList(Operation);
Operation_Insert._HappenedBefore = capnp.CompositeList(Operation_Timestamp);
